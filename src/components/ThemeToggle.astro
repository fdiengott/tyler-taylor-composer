<div>
    <input id="theme-toggle" type="checkbox" />
    <label for="theme-toggle" tabindex="0">Theme Toggle</label>
</div>

<script>
    document.addEventListener('astro:page-load', () => {
        const theme = (() => {
            if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
                return localStorage.getItem('theme') || 'light';
            }
            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
                return 'dark';
            }
            return 'light';
        })();

        if (theme === 'light') {
            document.documentElement.classList.remove('dark');
        } else {
            document.documentElement.classList.add('dark');
        }

        window.localStorage.setItem('theme', theme);

        const handleToggleClick = () => {
            const element = document.documentElement;
            element.classList.toggle('dark');

            const isDark = element.classList.contains('dark');
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
        };
        const handleKeyEnterToggle = (e: KeyboardEvent) => {
            if (e.key === 'Enter' || e.key === ' ') {
                const toggle = document.getElementById('theme-toggle') as HTMLInputElement;

                if (!toggle || toggle?.checked === undefined) return;

                toggle.checked = !toggle.checked;

                handleToggleClick();
            }
        };

        document.getElementById('theme-toggle')?.addEventListener('input', handleToggleClick);
        (document.querySelector('#theme-toggle + label') as HTMLLabelElement)?.addEventListener('keydown', handleKeyEnterToggle);
    });
</script>

<script>
    document.addEventListener('astro:after-swap', () => {
        if (localStorage.theme === 'dark') {
            document.documentElement.classList.add('dark');
        }
    });
</script>

<style>
    div {
        --label-width: 2rem;
        --knob-padding-inline: 3px;

        display: flex;
        align-items: center;
    }

    input[type='checkbox'] {
        height: 0;
        width: 0;
        visibility: hidden;
    }

    label {
        position: relative;
        width: var(--label-width);
        height: calc(var(--label-width) / 2 + 4px);
        background: var(--color-bg-secondary);
        border-radius: var(--spacing-800);
        text-indent: -9999px;
        cursor: pointer;
    }

    input:checked + label {
        background: var(--color-bg-secondary);
    }

    label:after {
        content: '';
        position: absolute;
        top: 2px;
        left: var(--knob-padding-inline);
        width: 1rem;
        height: 1rem;
        background: var(--color-bg-primary);
        border-radius: 90px;
        transition: 0.3s;
    }

    input:checked + label:after {
        left: calc(100% - var(--knob-padding-inline));
        transform: translateX(-100%);
    }
</style>
