---
import { getCollection, render } from 'astro:content';
import { slugify } from '../../utils/common-utils';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Youtube from '@/components/YoutubeEmbed';
import SoundCloud from '@/components/SoundCloudEmbed';
import type { WorkType } from '@/content.config';
import { removeTemplates } from '@/utils/data-utils';

interface Props {
    work: {
        data: WorkType;
    };
}

export async function getStaticPaths() {
    const works = await getCollection('works');
    const cleanWorks = removeTemplates(works);

    return cleanWorks.map((work: { data: WorkType }) => {
        return {
            params: { single: slugify(work.data.title) },
            props: { work },
        };
    });
}

const { work } = Astro.props;
const { audio, commissioner, duration, ensemble, extraNotes, instrumentation, premiere, title, video, year } = work.data;
const { Content } = await render(work as any);

const formattedPremiere =
    typeof premiere === 'string' &&
    new Date(premiere.trim().split(' ').at(0)).toLocaleDateString('en-US', {
        month: 'numeric',
        day: 'numeric',
        year: '2-digit',
    }) + ` ${premiere.trim().split(' ').slice(1).join(' ')}`;
---

<BaseLayout title={title}>
    <div class="variable-provider">
        <h1 class="title">
            {title}
            <span class="year">({year})</span>
        </h1>
        <div class="page-wrapper">
            <section>
                <div class="grid">
                    <div>
                        <b>Ensemble:</b>
                        {ensemble}
                        {instrumentation && <span>({instrumentation})</span>}
                    </div>
                    <div><b>Duration:</b> {duration} minutes</div>
                    {
                        commissioner && (
                            <div>
                                <b>Commissioned by:</b> {commissioner}
                            </div>
                        )
                    }
                    {
                        premiere && (
                            <div>
                                <b>Premiered:</b> {formattedPremiere}
                            </div>
                        )
                    }
                    {
                        extraNotes && (
                            <ul class="extra-notes">
                                {extraNotes.map((note: string) => (
                                    <li>{note}</li>
                                ))}
                            </ul>
                        )
                    }
                </div>
            </section>
            {
                audio && (
                    <aside>
                        <SoundCloud client:visible url={audio} width="100%" style={{ maxWidth: '100vw', marginInline: 'auto' }} />
                    </aside>
                )
            }
            {
                video &&
                    (Array.isArray(video) ? video : [video]).map((vid) => (
                        <Youtube client:load url={vid} title={title} width="100%" style={{ maxWidth: '100vw', marginInline: 'auto' }} />
                    ))
            }
        </div>

        <div class="content-wrapper">
            <Content />
        </div>
    </div>
</BaseLayout>

<style>
    .variable-provider {
        --section-separator: 1.5rem;
        --list-separator: 0.25rem;
    }
    .title {
        border-block-end: 1px solid var(--color-border-primary);
        margin-block-end: var(--section-separator);
    }

    .page-wrapper {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        gap: 2rem;

        & > * {
            flex: 1 1 20rem;
        }

        & > section {
            min-width: 20rem;
        }
    }
    .grid {
        display: grid;
        gap: var(--list-separator);
    }

    .content-wrapper {
        margin-block: 2rem;
        padding-block-start: var(--section-separator);
        border-block-start: 1px solid var(--color-border-primary);
        display: none;

        h2,
        h3,
        h4 {
            font-size: var(--fs-400);
        }

        &:has(> *) {
            display: block;
        }
    }

    aside {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        width: 100%;
    }

    .extra-notes {
        margin-block-start: 1rem;
        display: grid;
        gap: var(--list-separator);
    }

    .year {
        font-size: var(--fs-500);
        font-weight: normal;
    }
</style>
